?include "wsnwlink.h--"
?include "wsipx.h--"

?define SOCKET dword

?define WSADESCRIPTION_LEN 256
?define WSASYS_STATUS_LEN 128

?define INADDR_ANY  0x00000000
?define INADDR_NONE 0xFFFFFFFF

/*
 * Address families.
 */
#define AF_UNSPEC       0               /* unspecified */
#define AF_UNIX         1               /* local to host (pipes, portals) */
#define AF_INET         2               /* internetwork: UDP, TCP, etc. */
#define AF_IMPLINK      3               /* arpanet imp addresses */
#define AF_PUP          4               /* pup protocols: e.g. BSP */
#define AF_CHAOS        5               /* mit CHAOS protocols */
#define AF_IPX          6               /* IPX and SPX */
#define AF_NS           6               /* XEROX NS protocols */
#define AF_ISO          7               /* ISO protocols */
#define AF_OSI          AF_ISO          /* OSI is ISO */
#define AF_ECMA         8               /* european computer manufacturers */
#define AF_DATAKIT      9               /* datakit protocols */
#define AF_CCITT        10              /* CCITT protocols, X.25 etc */
#define AF_SNA          11              /* IBM SNA */
#define AF_DECnet       12              /* DECnet */
#define AF_DLI          13              /* Direct data link interface */
#define AF_LAT          14              /* LAT */
#define AF_HYLINK       15              /* NSC Hyperchannel */
#define AF_APPLETALK    16              /* AppleTalk */
#define AF_NETBIOS      17              /* NetBios-style addresses */
#define AF_VOICEVIEW    18              /* VoiceView */
#define AF_FIREFOX      19              /* FireFox */
#define AF_UNKNOWN1     20              /* Somebody is using this! */
#define AF_BAN          21              /* Banyan */

#define AF_MAX          22

/*
 * Protocol families, same as address families for now.
 */
#define PF_UNSPEC       AF_UNSPEC
#define PF_UNIX         AF_UNIX
#define PF_INET         AF_INET
#define PF_IMPLINK      AF_IMPLINK
#define PF_PUP          AF_PUP
#define PF_CHAOS        AF_CHAOS
#define PF_NS           AF_NS
#define PF_IPX          AF_IPX
#define PF_ISO          AF_ISO
#define PF_OSI          AF_OSI
#define PF_ECMA         AF_ECMA
#define PF_DATAKIT      AF_DATAKIT
#define PF_CCITT        AF_CCITT
#define PF_SNA          AF_SNA
#define PF_DECnet       AF_DECnet
#define PF_DLI          AF_DLI
#define PF_LAT          AF_LAT
#define PF_HYLINK       AF_HYLINK
#define PF_APPLETALK    AF_APPLETALK
#define PF_VOICEVIEW    AF_VOICEVIEW
#define PF_FIREFOX      AF_FIREFOX
#define PF_UNKNOWN1     AF_UNKNOWN1
#define PF_BAN          AF_BAN

#define PF_MAX          AF_MAX

?define INVALID_SOCKET  -1
?define SOCKET_ERROR    -1

?define SOCK_STREAM     1               /* stream socket */
?define SOCK_DGRAM      2               /* datagram socket */
?define SOCK_RAW        3               /* raw-protocol interface */
?define SOCK_RDM        4               /* reliably-delivered message */
?define SOCK_SEQPACKET  5               /* sequenced packet stream */

?define FIONBIO   0x8004667E      // Const
?define FIOASYNC	0x8004777D
#define FIONREAD	0x4004667F

?define	PCL_NONE	0

?define HOST_ENT	0x10;

#define IPPROTO_IP              0               /* dummy for IP */
#define IPPROTO_ICMP            1               /* control message protocol */
#define IPPROTO_IGMP            2               /* group management protocol */
#define IPPROTO_GGP             3               /* gateway^2 (deprecated) */
#define IPPROTO_TCP             6               /* tcp */
#define IPPROTO_PUP             12              /* pup */
#define IPPROTO_UDP             17              /* user datagram protocol */
#define IPPROTO_IDP             22              /* xns idp */
#define IPPROTO_ND              77              /* UNOFFICIAL net disk proto */

#define IPPROTO_RAW             255             /* raw IP packet */
#define IPPROTO_MAX             256

#define IPPORT_ECHO             7
#define IPPORT_DISCARD          9
#define IPPORT_SYSTAT           11
#define IPPORT_DAYTIME          13
#define IPPORT_NETSTAT          15
#define IPPORT_FTP              21
#define IPPORT_TELNET           23
#define IPPORT_SMTP             25
#define IPPORT_TIMESERVER       37
#define IPPORT_NAMESERVER       42
#define IPPORT_WHOIS            43
#define IPPORT_MTP              57

#define SO_DEBUG        0x0001          /* turn on debugging info recording */
#define SO_ACCEPTCONN   0x0002          /* socket has had listen() */
#define SO_REUSEADDR    0x0004          /* allow local address reuse */
#define SO_KEEPALIVE    0x0008          /* keep connections alive */
#define SO_DONTROUTE    0x0010          /* just use interface addresses */
#define SO_BROADCAST    0x0020          /* permit sending of broadcast msgs */
#define SO_USELOOPBACK  0x0040          /* bypass hardware when possible */
#define SO_LINGER       0x0080          /* linger on close if data present */
#define SO_OOBINLINE    0x0100          /* leave received OOB data in line */
#define SO_SNDBUF       0x1001          /* send buffer size */
#define SO_RCVBUF       0x1002          /* receive buffer size */
#define SO_SNDLOWAT     0x1003          /* send low-water mark */
#define SO_RCVLOWAT     0x1004          /* receive low-water mark */
#define SO_SNDTIMEO     0x1005          /* send timeout */
#define SO_RCVTIMEO     0x1006          /* receive timeout */
#define SO_ERROR        0x1007          /* get error status and clear */
#define SO_TYPE         0x1008          /* get socket type */
#define SO_CONNDATA     0x7000
#define SO_CONNOPT      0x7001
#define SO_DISCDATA     0x7002
#define SO_DISCOPT      0x7003
#define SO_CONNDATALEN  0x7004
#define SO_CONNOPTLEN   0x7005
#define SO_DISCDATALEN  0x7006
#define SO_DISCOPTLEN   0x7007
#define SO_OPENTYPE     0x7008

#define SO_SYNCHRONOUS_ALERT    0x10
#define SO_SYNCHRONOUS_NONALERT 0x20

#define TCP_NODELAY     0x0001
#define TCP_BSDURGENT   0x7000

#define WSABASEERR              10000
/*
 * Windows Sockets definitions of regular Microsoft C error constants
 */
#define WSAEINTR                WSABASEERR+4
#define WSAEBADF                WSABASEERR+9
#define WSAEACCES               WSABASEERR+13
#define WSAEFAULT               WSABASEERR+14
#define WSAEINVAL               WSABASEERR+22
#define WSAEMFILE               WSABASEERR+24

/*
 * Windows Sockets definitions of regular Berkeley error constants
 */
#define WSAEWOULDBLOCK          WSABASEERR+35
#define WSAEINPROGRESS          WSABASEERR+36
#define WSAEALREADY             WSABASEERR+37
#define WSAENOTSOCK             WSABASEERR+38
#define WSAEDESTADDRREQ         WSABASEERR+39
#define WSAEMSGSIZE             WSABASEERR+40
#define WSAEPROTOTYPE           WSABASEERR+41
#define WSAENOPROTOOPT          WSABASEERR+42
#define WSAEPROTONOSUPPORT      WSABASEERR+43
#define WSAESOCKTNOSUPPORT      WSABASEERR+44
#define WSAEOPNOTSUPP           WSABASEERR+45
#define WSAEPFNOSUPPORT         WSABASEERR+46
#define WSAEAFNOSUPPORT         WSABASEERR+47
#define WSAEADDRINUSE           WSABASEERR+48
#define WSAEADDRNOTAVAIL        WSABASEERR+49
#define WSAENETDOWN             WSABASEERR+50
#define WSAENETUNREACH          WSABASEERR+51
#define WSAENETRESET            WSABASEERR+52
#define WSAECONNABORTED         WSABASEERR+53
#define WSAECONNRESET           WSABASEERR+54
#define WSAENOBUFS              WSABASEERR+55
#define WSAEISCONN              WSABASEERR+56
#define WSAENOTCONN             WSABASEERR+57
#define WSAESHUTDOWN            WSABASEERR+58
#define WSAETOOMANYREFS         WSABASEERR+59
#define WSAETIMEDOUT            WSABASEERR+60
#define WSAECONNREFUSED         WSABASEERR+61
#define WSAELOOP                WSABASEERR+62
#define WSAENAMETOOLONG         WSABASEERR+63
#define WSAEHOSTDOWN            WSABASEERR+64
#define WSAEHOSTUNREACH         WSABASEERR+65
#define WSAENOTEMPTY            WSABASEERR+66
#define WSAEPROCLIM             WSABASEERR+67
#define WSAEUSERS               WSABASEERR+68
#define WSAEDQUOT               WSABASEERR+69
#define WSAESTALE               WSABASEERR+70
#define WSAEREMOTE              WSABASEERR+71

#define WSAEDISCON              WSABASEERR+101

/*
 * Extended Windows Sockets error constant definitions
 */
#define WSASYSNOTREADY          WSABASEERR+91
#define WSAVERNOTSUPPORTED      WSABASEERR+92
#define WSANOTINITIALISED       WSABASEERR+93


struct in_addr
{
 dword S_addr;/* can be used for most tcp & ip code */
};

#define WSADATA WSAData

struct WSAData
{
 word  wVersion;
 word  wHighVersion;
 char  szDescription[WSADESCRIPTION_LEN+1];
 char  szSystemStatus[WSASYS_STATUS_LEN+1];
 word  iMaxSockets;
 word  iMaxUdpDg;
 dword  lpVendorInfo;
};

struct sockaddr
{
 word sa_family;
 char  sa_data[14];
};

#define SOCKADDR_IN sockaddr_in

struct sockaddr_in
{
 short sin_family;
 word  sin_port;
// struct in_addr sin_addr;
 dword s_addr;
/////////////////////////
 char  sin_zero[8];
};

struct fd_set
{
 dword sock_num;
 SOCKET socks[32];		// Up to 32 handles in one time
};

extern WINAPI "WSOCK32.DLL"
{
 long WSAStartup();
 int WSAGetLastError();
 SOCKET socket();
 SOCKET accept();
 long setsockopt();
 long closesocket();
 word htons();
 dword htonl();
 long connect();
 dword inet_addr();
 long bind();
 long listen();
 long ioctlsocket();
 long WSACleanup();
 long getsockopt();
 long select();
 long send();
 long recv();
 long gethostbyname();
 long shutdown();
	int getpeername(dword s,name,namelen);
}

#define LPHOSTENT hostent

struct  hostent {
	dword h_name;      /* official name of host */
	dword h_aliases;   /* alias list */
	short h_addrtype;  /* host address type */
	short h_length;    /* length of address */
	dword h_addr_list; /* list of addresses */
//#define h_addr  h_addr_list[0]          /* address, for backward compat */
};
